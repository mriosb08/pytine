#!/usr/bin/python
from optparse import OptionParser
import pickle
from metrics import SetMetrics
from rteTools import RTETools 
from tine import TineVN
from edistance_srl import Edistance
def main():
    parser = OptionParser(usage="usage: %prog [options]", version="%prog 1.0")
    parser.add_option("-p", "--pickle-file", action="store", dest="pickle_file"
            , help="Pickle file generated by preprocessing for extract features")
    parser.add_option("-o", "--output-file", action="store", dest="output_file"
            , help="Output file for generated features")
    (options, args) = parser.parse_args()
    if not options.pickle_file or not options.output_file:
        parser.error("wrong number of options")
    extractFeatures(options)
    return

def extractFeatures(options):

    with open(options.pickle_file, 'r') as pf:
        pairs = pickle.load(pf)
        metrics = SetMetrics()
        tool = RTETools()
        feature_values = {}
        i = 0
        o = open(options.output_file, 'w')
        for pair in pairs:
            id = pair.get_id()
            value = pair.get_value()
            lemmas_text = pair.get_feature_text('lemmas')
            lemmas_hypo = pair.get_feature_hypo('lemmas')
            tool.set_tokens(lemmas_text)
            lemmas_text = tool.quit_sw()
            lemmas_text = tool.quit_punct()

            pos_text = pair.get_feature_text('pos')
            pos_hypo = pair.get_feature_hypo('pos')
            
            tool.set_tokens(lemmas_hypo)
            lemmas_hypo = tool.quit_sw()
            lemmas_hypo = tool.quit_punct()
            
            metrics.set_text(lemmas_text)
            metrics.set_hypo(lemmas_hypo)
            cos = metrics.cosine()
            print >>o, '>>'
            i = 0
            for lemma_text in lemmas_text:
                print >>o, '>word_t'
                print >>o, '%s %s "%s"'%(id, i, lemma_text)
                i += 1
            i = 0
            for lemma_hypo in lemmas_hypo:
                print >>o, '>word_h'
                print >>o, '%s %s "%s"'%(id, i, lemma_hypo)
                i += 1
            i = 0
            for l,pos_text in pos_text:
                print >>o, '>pos_t'
                print >>o, '%s %s "%s"'%(id, i, pos_text)
                i += 1
            i = 0
            for l,pos_hypo in pos_hypo:
                print >>o, '>pos_h'
                print >>o, '%s %s "%s"'%(id, i, pos_hypo)
                i += 1
            print >>o, '>cosine'
            print >>o, '%s %s'%(id, cos)
            print >>o, '>entailment'
            print >>o, '%s "%s"\n'%(id, value)


if __name__ == '__main__':
    main()
